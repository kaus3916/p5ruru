let obstacle;
let collectible;
let npc;
let exit;
let collected;

function setup() {
  createCanvas(400, 400);
  player = new Player();
  obstacle = new Obstacle(width/2, height/2);
  collectible = new Collectible(random(width), random(height));
  npc = new NPC(random(width), random(height));
  exit = new Exit(width - 50, height/2, 50);
  collected = false;
}

function draw() {
  background(220);
  
  player.display();
  player.update();
  
  obstacle.display();
  collectible.display();
  npc.display();
  exit.display();
  
  if (player.collides(obstacle)) {
    player.stop();
  }
  
  if (player.collides(npc)) {
    player.stop();
  }
  
  if (player.collides(collectible)) {
    collectible.collect();
    collected = true;
  }
  
  if (collected && player.collides(exit)) {
    player.reset();
    obstacle.reset();
    collectible.reset();
    npc.reset();
    collected = false;
  }
}

class Player {
  constructor() {
    this.x = 50;
    this.y = height/2;
    this.speed = 3;
    this.size = 20;
  }
  
  display() {
    fill(0, 0, 255);
    ellipse(this.x, this.y, this.size, this.size);
  }
  
  update() {
    if (keyIsDown(LEFT_ARROW)) {
      this.x -= this.speed;
    } else if (keyIsDown(RIGHT_ARROW)) {
      this.x += this.speed;
    } else if (keyIsDown(UP_ARROW)) {
      this.y -= this.speed;
    } else if (keyIsDown(DOWN_ARROW)) {
      this.y += this.speed;
    }
  }
  
  collides(other) {
    let d = dist(this.x, this.y, other.x, other.y);
    return d < this.size / 2 + other.size / 2;
  }
  
  stop() {
    // Stop the player from moving
    this.x = constrain(this.x, 0, width);
    this.y = constrain(this.y, 0, height);
  }
  
  reset() {
    this.x = 50;
    this.y = height/2;
  }
}

class Obstacle {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.size = 50;
  }
  
  display() {
    fill(255, 0, 0);
    rect(this.x, this.y, this.size, this.size);
  }
  
  reset() {
    this.x = width / 2;
    this.y = height / 2;
  }
}

class Collectible {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.size = 20;
    this.collected = false;
  }
  
  display() {
    if (!this.collected) {
      fill(0, 255, 0);
      ellipse(this.x, this.y, this.size, this.size);
    }
  }
  
  collect() {
    this.collected = true;
  }
  
  reset() {
    this.x = random(width);
    this.y = random(height);
    this.collected = false;
  }
}

class NPC {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.size = 30;
  }
  
  display() {
    fill(255);
    rect(this.x, this.y, this.size, this.size);
  }
  
  reset() {
    this.x = random(width);
    this.y = random(height);
  }
}

class Exit {
  constructor(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
  }
  
  display() {
    fill(255, 255, 0);
    rectMode(CENTER);
    rect(this.x, this.y, this.size, this.size);
  }
}
